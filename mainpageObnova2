<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Crypto Wallet</title>
<style>
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        margin: 0;
        padding: 0;
        background: linear-gradient(45deg, #2c3e50, #3498db);
        color: #fff;
        text-align: center;
        transition: background 0.5s ease;
    }

    header {
        background: linear-gradient(45deg, #3498db, #2c3e50);
        color: #fff;
        padding: 20px;
        font-size: 28px;
        border-bottom: 2px solid #fff;
    }

    h1 {
        margin: 0;
    }

    nav {
        display: flex;
        justify-content: center;
        background-color: rgba(0, 0, 0, 0.5);
        padding: 10px;
        border-bottom: 2px solid #fff;
    }

    nav a {
        color: #fff;
        text-decoration: none;
        padding: 10px 20px;
        margin: 0 10px;
        border-radius: 5px;
        transition: background-color 0.3s ease;
        font-size: 18px;
        cursor: pointer;
    }

    nav a:hover {
        background-color: rgba(255, 255, 255, 0.1);
    }

    .container {
        margin: 20px;
        padding: 20px;
        background: linear-gradient(180deg, #fff, #ecf0f1);
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        transition: box-shadow 0.3s ease;
    }

    h2 {
        color: #333;
    }

    p {
        color: #555;
        font-size: 20px;
    }

    .custom-button {
        background: linear-gradient(45deg, #3498db, #2c3e50);
        color: white;
        padding: 15px 30px;
        font-size: 24px;
        border: 2px solid white;
        border-radius: 8px;
        cursor: pointer;
        transition: background 0.3s ease, box-shadow 0.3s ease;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
    }

    .custom-button:hover {
        background: linear-gradient(45deg, #2c3e50, #3498db);
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.5);
    }

    #historyContainer {
    background: linear-gradient(180deg, #ecf0f1, #d0d3d4);
    color: #333; /* Додаємо колір тексту */
}

#historyContainer h2 {
    color: #333;
}

#transactionList li {
    margin: 10px 0;
    padding: 15px;
    border: 1px solid #bdc3c7;
    border-radius: 8px;
    background: linear-gradient(180deg, #fff, #ecf0f1);
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    color: #333; /* Додаємо колір тексту */
}

#transactionList li strong {
    color: #333;
}

    #receiveContainer {
        display: none;
    }

  #qrcode {
    margin: 15px auto; /* Додаємо автоматичні маржі, щоб центрувати */
    display: block; /* Забезпечуємо блоковий вивід для центрування */
    text-align: center; /* Центруємо вміст по горизонталі */
    line-height: 0; /* Виправлення для вирівнювання по вертикалі */
}

    #generateQRCodeButton {
        background: linear-gradient(45deg, #3498db, #2c3e50);
        color: white;
        padding: 10px 20px;
        font-size: 18px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background 0.3s ease;
    }

    #generateQRCodeButton:hover {
        background: linear-gradient(45deg, #2c3e50, #3498db);
    }

    /* Змінюємо колір тексту для білого фону */
    label {
        color: #333;
    }
</style>



</head>
<body>

<header>
    <h1>Crypto Wallet</h1>
</header>

<nav>
    <a href="#" onclick="showContent('Home')">Home</a>
    <a href="#" onclick="showContent('Balance')">Balance</a>
    <a href="#" onclick="showContent('Send')">Send</a>
    <a href="#" onclick="showContent('Receive')">Receive</a>
    <a href="#" onclick="showContent('History')">History</a>
</nav>

<!-- Display Content -->
<div id="content" class="container">
    <h2>Welcome to Crypto Wallet!</h2>
    <p>Select an option from the menu above.</p>
</div>

<!-- Display Balance -->
<div class="container" id="balanceContainer" style="display: none;">
    <h2>Your Balance:</h2>
    <p id="userBalance">Click 'Check Balance' to view</p>
    <button class="custom-button" onclick="generateRandomBalance()">Check Balance</button>
</div>

<!-- Display Send Form -->
<div class="container" id="sendContainer" style="display: none;">
    <h2>Send Funds</h2>
    <label for="sendAmount">Amount:</label>
    <input type="number" id="sendAmount" placeholder="Enter amount" required>
    <label for="recipientAddress">Recipient Address:</label>
    <input type="text" id="recipientAddress" placeholder="Enter recipient address" required>
    <button class="custom-button" onclick="sendFunds()">Send</button>
</div>

<!-- Display Receive Address -->
<div class="container" id="receiveContainer" style="display: none;">
    <h2>Your Receive Address:</h2>
    <p id="receiveAddress">Your Ethereum Address</p>
    <div id="qrcode"></div>
    <button class="custom-button" onclick="generateQRCode()">Generate QR Code</button>
</div>



<div class="container" id="receiveContainer" style="display: none;">
    <h2>Your Receive Address:</h2>
    <p id="receiveAddress">Your Ethereum Address</p>
    <div id="qrcode"></div> <!-- Додаємо контейнер для вставки QR-коду -->
    <button class="custom-button" onclick="generateQRCode()">Generate QR Code</button>
</div>

<!-- Transaction History -->
<div class="container" id="historyContainer" style="display: none;">
    <h2>Transaction History</h2>
    <ul id="transactionList"></ul>
</div>

<script src="https://cdn.rawgit.com/davidshimjs/qrcodejs/gh-pages/qrcode.min.js"></script>

<script>
    let balance = 0;
    let transactions = [];
    let receiveAddress = generateRandomAddress(); // Генеруємо адресу при завантаженні сторінки
    let qrCodeGenerated = false;

    // Function to generate random balance
    function generateRandomBalance() {
        if (balance === 0) {
            balance = (Math.random() * 100).toFixed(2);
            document.getElementById("userBalance").innerText = balance + ' ETH';
        }
    }

    // Function to generate random address
    function generateRandomAddress() {
        const characters = '0123456789ABCDEF';
        let address = '0x';
        for (let i = 0; i < 40; i++) {
            address += characters[Math.floor(Math.random() * characters.length)];
        }
        return address;
    }

    // Function to show content based on menu selection
    function showContent(option) {
        document.getElementById("content").style.display = "none";
        document.getElementById("balanceContainer").style.display = "none";
        document.getElementById("sendContainer").style.display = "none";
        document.getElementById("receiveContainer").style.display = "none";
        document.getElementById("historyContainer").style.display = "none";

        switch (option) {
            case 'Home':
                document.getElementById("content").style.display = "block";
                break;
            case 'Balance':
                generateRandomBalance();
                document.getElementById("balanceContainer").style.display = "block";
                break;
            case 'Send':
                document.getElementById("sendContainer").style.display = "block";
                break;
            case 'Receive':
                document.getElementById("receiveContainer").style.display = "block";
                document.getElementById("receiveAddress").innerText = receiveAddress;
                break;
            case 'History':
                displayTransactionHistory();
                document.getElementById("historyContainer").style.display = "block";
                break;
            default:
                document.getElementById("content").style.display = "block";
        }
    }

    // Function to send funds
    function sendFunds() {
        const sendAmount = parseFloat(document.getElementById("sendAmount").value);
        const recipientAddress = document.getElementById("recipientAddress").value;
        if (!isNaN(sendAmount) && sendAmount > 0 && sendAmount <= balance && recipientAddress) {
            // Виконати транзакцію
            balance -= sendAmount;

            // Генерувати унікальний хеш для транзакції (простий приклад, насправді потрібно використовувати безпечні методи)
            const transactionHash = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);

            // Записати транзакцію в історію
            const transaction = {
                sender: receiveAddress,  // Отримувач (в даному випадку, генерована адреса)
                recipient: recipientAddress,  // Адреса отримувача
                amount: sendAmount,  // Сума транзакції
                hash: transactionHash  // Хеш транзакції
            };

            transactions.push(transaction);
            displayTransactionHistory();
            generateRandomBalance();
        } else {
            alert("Invalid amount, insufficient balance, or missing recipient address.");
        }
    }

    // Функція для відображення історії транзакцій
    function displayTransactionHistory() {
        const transactionList = document.getElementById("transactionList");
        transactionList.innerHTML = "";
        transactions.forEach(transaction => {
            const listItem = document.createElement("li");
            listItem.innerHTML = `<strong>From:</strong> ${transaction.sender}, <strong>To:</strong> ${transaction.recipient}, <strong>Amount:</strong> ${transaction.amount} ETH, <strong>Hash:</strong> ${transaction.hash}`;
            transactionList.appendChild(listItem);
        });
    }

    // Function to generate QR code
    function generateQRCode() {
        if (!qrCodeGenerated) {
            const qrcode = new QRCode(document.getElementById("qrcode"), {
                text: receiveAddress,
                width: 128,
                height: 128
            });
            qrCodeGenerated = true;
        }
    }
</script>



</body>
</html>
